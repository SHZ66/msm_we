{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35be5476-897b-465f-97b3-d4296940857e",
   "metadata": {},
   "source": [
    "# Trp-cage WE Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d103aca8-b019-4410-945e-976b29cb429a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from msm_we import optimization as mo\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1355c89-976f-402e-92c3-822e378f47ca",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Load haMSM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9004b932-8599-4336-b3d5-b57a77c882c1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "with open('data/pickled_model', 'rb') as inf:\n",
    "    model = pickle.load(inf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3094bc4-1e2b-4522-8327-fc9bf09453cc",
   "metadata": {},
   "source": [
    "## Compute discrepancy, variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "be89423e-27a7-4aac-90f8-f38e42ef2a42",
   "metadata": {},
   "outputs": [],
   "source": [
    "steady_state_distribution = model.pSS\n",
    "n_active_we_bins = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d598c8cd-8a7a-4a43-a383-701928eeba36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[10/03/22 17:36:38] </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Computing pi matrix                                                 <a href=\"file:///home/jd/msm_we/msm_we/optimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">optimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/jd/msm_we/msm_we/optimization.py#49\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">49</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[10/03/22 17:36:38]\u001b[0m\u001b[2;36m \u001b[0m\u001b[34mINFO    \u001b[0m Computing pi matrix                                                 \u001b]8;id=950467;file:///home/jd/msm_we/msm_we/optimization.py\u001b\\\u001b[2moptimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=513864;file:///home/jd/msm_we/msm_we/optimization.py#49\u001b\\\u001b[2m49\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "discrepancy, variance = mo.solve_discrepancy(\n",
    "    tmatrix = model.Tmatrix,\n",
    "    pi = steady_state_distribution,\n",
    "    B = model.indTargets\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b4eba06-5be5-4a73-8be1-a5487e5b2bef",
   "metadata": {},
   "source": [
    "## Compute WE bin assignments for each MSM microstate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ed128655-55a4-4f92-8add-374a275ca9bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       6, 0, 0, 0, 6, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 0, 7])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is a list with an element for each MSM microbin, which is the integer index of the\n",
    "#   WE bin it's assigned to.\n",
    "# In other words, microstate_assignments[microbin_index] == WE bin index of that microbin\n",
    "microstate_assignments = mo.get_uniform_mfpt_bins(\n",
    "    variance, discrepancy, steady_state_distribution, n_active_we_bins\n",
    ")\n",
    "microstate_assignments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "875bfa35-7d2b-43b6-8161-890f078fd9fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       6, 0, 0, 0, 6, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 0, 7, 8, 9])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add entries for the basis/target states, since MSM-WE sets those as the last two clusters\n",
    "microstate_assignments = np.concatenate(\n",
    "    [microstate_assignments, [n_active_we_bins - 2, n_active_we_bins - 1]]\n",
    ")\n",
    "microstate_assignments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a7813b4-2fe2-4430-9cbc-9e24ef911f56",
   "metadata": {},
   "source": [
    "## Create `OptimizedBinMapper`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6e9ecfe3-7e75-443d-a38d-380aafa529ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_mapper = model.clusters.bin_mapper\n",
    "n_pcoord_dims=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "31f81f45-219d-44c9-b686-69190e40e24f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Multiple arguments provided to binmapper initializer, creating new <a href=\"file:///home/jd/msm_we/msm_we/optimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">optimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/jd/msm_we/msm_we/optimization.py#167\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">167</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span>         object                                                             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m                   \u001b[0m\u001b[2;36m \u001b[0m\u001b[34mINFO    \u001b[0m Multiple arguments provided to binmapper initializer, creating new \u001b]8;id=463011;file:///home/jd/msm_we/msm_we/optimization.py\u001b\\\u001b[2moptimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=150651;file:///home/jd/msm_we/msm_we/optimization.py#167\u001b\\\u001b[2m167\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m                    \u001b[0m         object                                                             \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Clusterer has <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">72</span> total clusters <span style=\"font-weight: bold\">(</span>include <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> for basis and <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> for     <a href=\"file:///home/jd/msm_we/msm_we/optimization.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">optimization.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/jd/msm_we/msm_we/optimization.py#227\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">227</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span>         target<span style=\"font-weight: bold\">)</span>                                                            <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m                   \u001b[0m\u001b[2;36m \u001b[0m\u001b[34mINFO    \u001b[0m Clusterer has \u001b[1;36m72\u001b[0m total clusters \u001b[1m(\u001b[0minclude \u001b[1;36m1\u001b[0m for basis and \u001b[1;36m1\u001b[0m for     \u001b]8;id=997044;file:///home/jd/msm_we/msm_we/optimization.py\u001b\\\u001b[2moptimization.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=548556;file:///home/jd/msm_we/msm_we/optimization.py#227\u001b\\\u001b[2m227\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m                    \u001b[0m         target\u001b[1m)\u001b[0m                                                            \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<OptimizedBinMapper at 0x7fdea5f2a6a0 with 10 bins>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create the new bin mapper for WESTPA\n",
    "we_bin_mapper = mo.OptimizedBinMapper(\n",
    "    n_active_we_bins,\n",
    "    # In case the pcoord is extended, this is the original pcoord dimensionality\n",
    "    n_pcoord_dims,\n",
    "    # If the pcoord was extended, pcoord boundaries are in the original pcoord space\n",
    "    model.basis_pcoord_bounds,\n",
    "    model.target_pcoord_bounds,\n",
    "    # The original, non-Optimized BinMapper that WESTPA was run with.\n",
    "    #   Used for stratified clustering\n",
    "    base_mapper,\n",
    "    microstate_assignments,\n",
    "    model.clusters\n",
    ")\n",
    "\n",
    "we_bin_mapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98867a24-32bf-4323-91ae-2cf603ac3ab1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       6, 0, 0, 0, 6, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n",
       "       7, 7, 7, 7, 0, 7, 8, 9])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "we_bin_mapper.microstate_mapper"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
